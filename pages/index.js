/* eslint-disable @next/next/no-img-element */
import { useEffect, useRef, useState } from "react";
import Head from "next/head";

//data
import courses from "../data/courses.json";

//components
import Carousel from "../components/carousel/Carousel";
import WriteAnimation from "../components/writeAnimation/WriteAnimation";
import Course from "../components/course/Course";
import ObserverComponent from "../components/observerComponent/ObserverComponent";
import Waves from "../components/waves/Waves";
import Carousel3D from "../components/carousel3D/Carousel3D";
import Navbar from "../components/navbar/Navbar";
import ContactModal from "../components/contactModal/ContactModal";
import { AiOutlineMail } from "react-icons/ai";

export default function Home() {
  // refs:
  const headerWrapperRef = useRef(null);
  const projectsRef = useRef(null);
  const coursesRef = useRef(null);
  const coursesWrapperRef = useRef(null);
  const aboutRef = useRef(null);

  const [documentHeight, setDocumentHeight] = useState(0);
  const [windowHeight, setWindowHeight] = useState(0);
  const [scrollPos, setScrollPos] = useState(0);
  const [contactModal, setContactModal] = useState(false);
  useEffect(() => {
    window.addEventListener("scroll", scrollHandler);
    window.addEventListener("resize", resizeHandler);
    setDocumentHeight(
      document.body.offsetHeight || documentElement.offsetHeight
    );
    setWindowHeight(window.innerHeight);
  }, []);
  useEffect(() => {
    // make the document non-scrollable when the contact modal is visible
    document.documentElement.style.overflowY = contactModal
      ? "hidden"
      : "scroll";
  }, [contactModal]);
  function scrollHandler() {
    // keep track of scroll position:
    setScrollPos(document.body.scrollTop || document.documentElement.scrollTop);
  }
  function resizeHandler() {
    setDocumentHeight(
      document.body.offsetHeight || documentElement.offsetHeight
    );
    setWindowHeight(window.innerHeight);
  }

  function scrollToSection(section) {
    switch (section) {
      case "projects":
        projectsRef.current.scrollIntoView();
        break;
      case "courses":
        coursesRef.current.scrollIntoView();
        break;
      case "about":
        aboutRef.current.scrollIntoView();
        break;
      case "contact":
        setContactModal(true);
        break;
      default:
        break;
    }
  }

  return (
    <div>
      <Head>
        <title>Kris Heijnen - Web Developer</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <main>
        {/* HEADER */}
        <header className="header">
          <Navbar
            scrollToSection={scrollToSection}
            scrollPos={scrollPos}
            documentHeight={documentHeight}
            windowHeight={windowHeight}
          />
          <div className="header__wrapper" ref={headerWrapperRef}>
            <div className="photo-wrapper">
              <div className="photo"></div>
            </div>
            <div className="group">
              <div>
                <div className="my-name-is">Hi, my name is</div>
                <h1>Kris Heijnen</h1>
              </div>
              <h4 className="mono">
                <WriteAnimation sentence="web developer;" delay={1000} />
              </h4>
            </div>
          </div>
          <div className="waves">
            <Waves />
          </div>
        </header>
        {/* PROJECTS */}
        <section className="projects" ref={projectsRef}>
          <h2 className="projects__title">Projects</h2>
          <ObserverComponent
            addClass={["link--active"]}
            targetClass={"projects-link"}
            options={{ threshold: "0.5" }}
          >
            <>
              <div className="mobile">
                <Carousel />
              </div>
              <div className="desktop">
                <Carousel3D />
              </div>
            </>
          </ObserverComponent>
        </section>
        {/* COURSES */}
        <section className="courses" ref={coursesRef}>
          <h2 className="courses__title">Education and work</h2>
          <ObserverComponent
            addClass={["link--active"]}
            targetClass={"courses-link"}
            options={{ threshold: "0.5" }}
          >
            <div className="courses__wrapper" ref={coursesWrapperRef}>
              {courses.map((course, index) => {
                const observerOptions = {
                  threshold: "1.0",
                };
                return (
                  <ObserverComponent
                    addClass={["fade-in-course"]}
                    options={observerOptions}
                    key={course.title}
                  >
                    <Course
                      title={course.title}
                      date={course.date}
                      lastOfArray={index == courses.length - 1}
                    >
                      {course.description}
                    </Course>
                  </ObserverComponent>
                );
              })}
            </div>
          </ObserverComponent>
        </section>
        <section className="about" ref={aboutRef}>
        <h2 className="about__title">About me</h2>

          <ObserverComponent
            addClass={["link--active"]}
            targetClass={"about-link"}
            options={{ threshold: "0.5" }}
          >
            <div className="about__wrapper">
              <p>
              Hi, I'm Kris, a web developer with a passion for creating clean, efficient, and impactful code. While I love the technical challenge that coding brings — debugging, optimizing, and building something from scratch — what truly drives me is the opportunity to create solutions that make a difference for people.
              </p>
              <p>
              Whether it's designing a smooth user experience, improving website performance, or building tools that simplify daily tasks, I believe that technology should always be about making things better for real people. I'm excited to work on projects that align with this philosophy, where my skills can contribute to something bigger than just the code itself.
              </p>
              <button
                className="contact-button"
                onClick={() => setContactModal(true)}
              >
                <AiOutlineMail size="1.2em" /> <span>Get in touch</span>
              </button>
              {contactModal && (
                <ContactModal removeModal={() => setContactModal(false)} />
              )}
            </div>
          </ObserverComponent>
        </section>
      </main>

      <footer></footer>
    </div>
  );
}
